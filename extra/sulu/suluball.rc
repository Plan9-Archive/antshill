#!/bin/rc
# prototype proof of concept timewarping rc script

fn parsemsg{
	vrt=$msg(1)
	vst=$msg(2)
	rcvr=$msg(3)
	sndr=$msg(4)
	sign=$msg(5)
	gid=$msg(6)
	body=$msg(7-)
}

fn cancelinq{
	for(i in `{ls inq}){
		chksign=`{cat $i}
		if(~ $chksign(5) neg){
			for(j in `{ls inq}){
				chkmatch=`{cat $j}
				if(~ $chkmatch(5) pos){
					if(~ $chkmatch(6) $chksign(6)){
						echo removing $i $j
						rm $i
						rm $j
					}
				}
			}
		}
	}
}

dim=`{echo -n $mynum |wc -c}
echo $dim
cd /tmp/$mynum
rm state.*
rm inq/*
rm antiq/*
thefort=`{fortune}
accum=$mynum
echo init accum $accum
cvt=0
outtime=`{echo $cvt + 1 |hoc}
outmsg=($cvt $cvt $cvt $mynum pos $mynum.$cvt $accum)
antimsg=($cvt $cvt $cvt $mynum neg $mynum.$cvt $accum)
while(! ~ `{date -n} *0?)sleep .5
echo sending $outmsg to /n/cube/$cvt
echo $outmsg >>/n/cube/$cvt
echo $antimsg >antiq/$cvt
echo $accum >state.$cvt
while(msg=`{read}){
	echo _____vt $cvt received msg $msg
	if(test $#msg -gt 5){
		parsemsg
		echo $msg >inq/$vrt
		echo msg vrt is $vrt checking if less than cvt $cvt
		if(test $vrt -lt $cvt){
			cvt=$vrt
			echo rollback to $cvt
			if(test -e state.$cvt){
				echo setting accum to previous state $cvt
				accum=`{cat state.$cvt}
			}
		}
		cancelinq
	}
	echo accum is $accum
	if(test -e inq/$cvt){
		msg=`{cat inq/$cvt}
		parsemsg
		echo updating accum $accum plus body $body
		accum=($accum $body)
	}
	outtime=`{echo $cvt + 1 |hoc}
	outmsg=($outtime $outtime $cvt $mynum pos $mynum.$cvt $accum)
	antimsg=($outtime $cvt $cvt $mynum neg $mynum.$cvt $accum)
	prevmsg=`{cat antiq/$cvt}
	port=$cvt
	if(test $port -gt $dim)
		port=$dim
	if(test $#prevmsg -gt 5){
		if(! ~ $antimsg $prevmsg){
			echo sending $prevmsg to /n/cube/$port
			echo $prevmsg >>/n/cube/$port
		}
	}
	echo sending $outmsg to /n/cube/$port
	echo $outmsg >>/n/cube/$port
	echo $antimsg >antiq/$cvt
	echo $accum >state.$outtime
	cvt=`{echo $cvt + 1 |hoc}
}
