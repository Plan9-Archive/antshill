#!/bin/rc
# build script for advanced namespace tools/rootless boot kernel

if(~ $#1 0){
	echo 'build needs a target, valid targets include:'
	echo '9front, fronthost, frontkernel'
	echo '9frontinstall, vultr, vultrfossil'
	echo '9frontcd, distromod, clean'
	echo 'frontpatched, extras, tools'
	exit no.target
}
if(! test -e bootdir.extras){
	echo 'This build script must be run only from the base rootless directory'
	exit wrong.dir
}
if(~ `{pwd} /tmp*){
	echo 'The /tmp directory is used by the build process - cannot build here'
	exit wrong.dir
}

rfork ne
. /$objtype/mkfile
builddir=`{pwd}

if(~ $1 distromod){
	cp frontmods/libauthsrv/readnvram.c /sys/src/libauthsrv/readnvram.c
	cp frontmods/rcbin/9fs /rc/bin/9fs
	cp frontmods/rcbin/fshalt /rc/bin/fshalt
	cp frontmods/rcbin/termrc /rc/bin/termrc
	cp frontmods/syslibsysconfigproto/distproto /sys/lib/sysconfig/proto/distproto
	exit
}

if(~ $1 portsinstall){
	cd hubfs
	mk install
	cd $builddir/grio
	mk install
	cp grio.man /sys/man/1/grio
	cd $builddir/patched
	$CC -FTVw gridlisten.c
	$LD -o gridlisten gridlisten.$O
	cp gridlisten /$objtype/bin
	$CC -FTVw gridlisten1.c
	$LD -o gridlisten1 gridlisten1.$O
	cp gridlisten1 /$objtype/bin
	cd $builddir/scripts
	cp gridstart /rc/bin
	cp rerootwin /rc/bin
	cd $builddir/bootdir.extras
	cp namespace.saveterm /lib
	cp namespace.save9front /lib
	cd $builddir
	cp sys/man/1/rerootwin /sys/man/1
	cp sys/man/1/gridstart /sys/man/1
	cp sys/man/1/gridlisten1 /sys/man/8
}

if(~ $1 portsuninstall){
	rm /bin/hubfs
	rm /bin/hubshell
	rm /bin/hub
	rm /bin/chat
	rm /bin/grio
	rm /bin/gridlisten
	rm /bin/gridlisten1
	rm /bin/rerootwin
	rm /bin/gridstart
	rm /sys/man/1/grio
	rm /sys/man/4/hubfs
	rm /sys/man/1/chat
	rm /sys/man/1/gridstart
	rm /sys/man/1/gridlisten1
	rm /sys/man/1/rerootwin
	rm /lib/namespace.saveterm
	rm /lib/namespace.save9front
}

if(~ $1 9frontcd){
	if(~ $objtype amd64){
		if(! test -f /$objtype/9ants64 || ! test -f /$objtype/tools.tgz){
			echo please build 9ants kernel and tools.tgz and place in /$objtype
			exit no.files
		}
	}
	if(~ $objtype 386){
		if(! test -f /$objtype/9ants || ! test -f /$objtype/tools.tgz){
			echo please build 9ants kernel and tools.tgz and place in /$objtype
			exit no.files
		}
	}
	mkdir /sys/src/ants
	mkdir /rc/bin/instants
	bind /root /n/src9
	bind $builddir /n/src9/sys/src/ants
	bind frontmods/instants /n/src9/rc/bin/instants
	bind -b frontmods/syslibdist /n/src9/sys/lib/dist
	bind -b frontmods/usrglendalib /n/src9/sys/lib/dist/usr/glenda/lib
	bind -b frontmods/usrglendabinrc /n/src9/sys/lib/dist/usr/glenda/bin/rc
	bind -ac /dist/plan9front /n/src9
	cd /sys/lib/dist
	mk /tmp/9front.$objtype.iso
	cd $builddir
	exit
}

if(! test -d compiletemp){
	echo 'mkdir compiletemp'	
	mkdir compiletemp
}
if(! test -d bootdir.extras/root/n){
	echo 'creating bootdir.extras/root skeleton'
	cd bootdir.extras
	tar xf skel.tar
	cd $builddir
}
if(! test -e root/acme/bin/$objtype/win){
	echo 'copying acme binaries'
	cp /acme/bin/$objtype/mkwnew root/acme/bin/$objtype
	cp /acme/bin/$objtype/spout root/acme/bin/$objtype
	cp /acme/bin/$objtype/win root/acme/bin/$objtype
}
if(! test -e root/lib/font/bit/lucidasans/NOTICE){
	echo 'copying fonts'
	dircp /lib/font/bit/lucidasans root/lib/font/bit/lucidasans
	dircp /lib/font/bit/lucm root/lib/font/bit/lucm
	cp /lib/font/bit/lucm/latin1.9 bootdir.extras/root/lib/font/bit/lucm
	cp /lib/font/bit/lucm/latin1.9.font bootdir.extras/root/lib/font/bit/lucm
	cp /lib/font/bit/lucm/unicode.9.font bootdir.extras/root/lib/font/bit/lucm
}
if(! test -e doc/ants.ps)
	troff -ms doc/antspaper.ms | dpost >doc/ants.ps
rm -rf compiletemp/*

if(~ $1 clean){
	echo building mk clean
	cd grio
	mk clean
	cd $builddir
	cd hubfs
	mk clean
	cd $builddir
	rm root/bin/* >/dev/null >[2=1]
	exit ''
}

if(! test -e /sys/include/libc.h.orig){
	echo 'backing up libc and lib9p and /lib/namespace'
	cp /sys/include/libc.h /sys/include/libc.h.orig
	cp /sys/src/lib9p/srv.c /sys/src/lib9p/srv.c.orig
	cp /lib/namespace /lib/namespace.orig
}
if(! test -e /$objtype/bin/rc.orig){
	echo 'backing up rc at rc.orig'
	cp /$objtype/bin/rc /$objtype/bin/rc.orig
}
if(! test -e frontmods/include/libc.rebuild.complete){
	echo 'rebuilding libs with modified libc and lib9p'
	sleep 5
	cp frontmods/lib/namespace /lib/namespace
	cp frontmods/include/libc.h /sys/include/libc.h
	cp frontmods/lib9p/srv.c /sys/src/lib9p/srv.c
	cd /sys/src
	mk cleanlibs
	mk libs
	mk cleanlibs
	cd $builddir
	touch frontmods/include/libc.rebuild.complete
}

if(~ $1 frontpatched){
	echo building patched
	ramfs
	mkdir /tmp/rc
	dircp /sys/src/cmd/rc /tmp/rc
	cp frontmods/rc/plan9.c /tmp/rc/plan9.c
	cd /tmp/rc
	mk install
	cd $builddir
	mkdir /tmp/factotum
	dircp /sys/src/cmd/auth/factotum /tmp/factotum
	cp frontmods/factotum/* /tmp/factotum
	cd /tmp/factotum
	mk $O.factotum
	cp $O.factotum $builddir/bootdir.extras/factotum
	cd $builddir
	strip bootdir.extras/factotum >/dev/null >[2=1]
	rm -rf /tmp/factotum
	exit ''
}

if(~ $1 extras){
	echo building extras
	cd grio
	mk clean
	mk
	cp $O.out ../bootdir.extras/grio
	cd ../hubfs
	mk clean
	mk all
	cp $O.hubfs ../bootdir.extras/hubfs
	cp $O.hubshell ../bootdir.extras/hubshell
	cp hub ../bootdir.extras
	cd $builddir
	strip bootdir.extras/grio >/dev/null >[2=1]
	strip bootdir.extras/hubfs >/dev/null >[2=1]
	strip bootdir.extras/hubshell >/dev/null >[2=1]
	exit ''
}

fn checkfrontclean{
	if(~ $objtype 386){
		if(test -e /sys/src/9/pc/9pc){
			echo 'please mk clean in /sys/src/9/pc before building'
			exit
		}
	}
	if(~ $objtype amd64){
		if(test -e /sys/src/9/pc64/9pc64){
			echo 'please mk clean in /sys/src/9/pc64 before building'
			exit
		}
	}
}

if(~ $1 9front){
	checkfrontclean
	cd $builddir
	build extras
	build frontpatched
	build tools
	cd bootdir.extras
	rm skel.tar
	tar cf skel.tar root
	cd $builddir
	bind -bc frontmods/boot /sys/src/9/boot
	bind -bc frontmods/port /sys/src/9/port
	bind -bc frontmods/pc /sys/src/9/pc
	bind -bc frontmods/pc64 /sys/src/9/pc64
	bind -bc compiletemp /sys/src/9/pc
	if(~ $objtype amd64){
		unmount compiletemp /sys/src/9/pc
		bind -bc compiletemp /sys/src/9/pc64
	}
	bind . /n/rootless
	cd /sys/src/9/pc
	if(~ $objtype amd64)
		cd /sys/src/9/pc64
	mk
	cd $builddir
	if(test -e compiletemp/9pc){
		cp compiletemp/9pc 9ants
		echo 9ants kernel built
	}
	if(test -e compiletemp/9pc64){
		cp compiletemp/9pc64 9ants64
		echo 9ants64 kernel built
	}
	exit
}

if(~ $1 frontkernel){
	checkfrontclean
	cd $builddir
	build extras
	build frontpatched
	cd bootdir.extras
	rm skel.tar
	tar cf skel.tar root
	cd $builddir
	bind -bc frontmods/boot /sys/src/9/boot
	bind -bc frontmods/port /sys/src/9/port
	bind -bc frontmods/pc /sys/src/9/pc
	bind -bc frontmods/pc64 /sys/src/9/pc64
	bind -bc compiletemp /sys/src/9/pc
	if(~ $objtype amd64){
		unmount compiletemp /sys/src/9/pc
		bind -bc compiletemp /sys/src/9/pc64
	}
	bind . /n/rootless
	cd /sys/src/9/pc
	if(~ $objtype amd64)
		cd /sys/src/9/pc64
	mk
	cd $builddir
	if(test -e compiletemp/9pc){
		cp compiletemp/9pc 9ants
		echo 9ants kernel built
	}
	if(test -e compiletemp/9pc64){
		cp compiletemp/9pc64 9ants64
		echo 9ants64 kernel built
	}
	exit
}

if(~ $1 fronthost){
	echo 'installing ANTS userspace tools'
	build extras
	cd hubfs
	mk install
	cd ..
	cd patched
	$CC -FTVw gridlisten.c
	$LD -o gridlisten gridlisten.$O
	cp gridlisten /$objtype/bin
	$CC -FTVw gridlisten1.c
	$LD -o gridlisten1 gridlisten1.$O
	cp gridlisten1 /$objtype/bin
	cd ..
	cp bootdir.extras/grio /$objtype/bin
	cp scripts/* /rc/bin
	cp bootdir.extras/namespace.saveterm /lib/namespace.saveterm
	cp bootdir.extras/namespace.save9front /lib/namespace.save9front
	cp /sys/man/1/rc /sys/man/1/rc.orig
	cp /sys/man/2/fork /sys/man/2/fork.orig
	cp /sys/man/3/srv /sys/man/3/srv.orig
	cp /sys/man/3/proc /sys/man/3/proc.orig
	cp sys/man/1/grio /sys/man/1/grio
	cp sys/man/1/cpns /sys/man/1/cpns
	cp sys/man/1/rerootwin /sys/man/1/rerootwin
	cp sys/man/1/addwrroot /sys/man/1/addwrroot
	cp sys/man/1/rc /sys/man/1/rc
	cp sys/man/1/chat /sys/man/1/chat
	cp sys/man/1/gridstart /sys/man/1/gridstart
	cp sys/man/2/fork /sys/man/2/fork
	cp sys/man/3/srv /sys/man/3/srv
	cp sys/man/3/proc /sys/man/3/proc
	cp sys/man/8/plan9rc /sys/man/8/plan9rc
	cp sys/man/8/ventiprog /sys/man/8/ventiprog
	cp sys/man/8/gridlisten1 /sys/man/8/gridlisten1
	cp doc/antspaper.ms /sys/doc/ants.ms
	cp doc/ants.ps /sys/doc/ants.ps
	echo 'ANTS userspace installed, if using ANTS kernel add this to the end of /rc/bin/termrc:'
	echo 'home=/usr/$user; cd; . $home/lib/profile'
	exit
}

if(~ $1 9frontinstall){
	if (! test -e 9ants){
		echo no 9ants kernel found, use build 9front first
		exit
	}
	echo 'MODIFIES PLAN9.INI AND BOOTUP'
	echo 'use bootfile=9ants at bootup for new kernel'
	echo 'use bootfile=9pc for previous kernel'
	cd patched
	$CC -FTVw gridlisten.c
	$LD -o gridlisten gridlisten.$O
	cp gridlisten /$objtype/bin
	$CC -FTVw gridlisten1.c
	$LD -o gridlisten1 gridlisten1.$O
	cp gridlisten1 /$objtype/bin
	cd ..
	cd hubfs
	mk install
	cd ..
	cp bootdir.extras/grio /$objtype/bin
	cp scripts/* /rc/bin
	cp bootdir.extras/namespace.saveterm /lib/namespace.saveterm
	cp bootdir.extras/namespace.save9front /lib/namespace.save9front
	9fs 9fat
	cp /n/9fat/plan9.ini /n/9fat/p9ini.bak
	cp cfg/plan9.ini /n/9fat/plan9.ini
	cp tools.tgz /n/9fat/tools.tgz
	cp 9ants /n/9fat/9ants
	echo 'home=/usr/$user; cd; . $home/lib/profile' >>/rc/bin/termrc
	cp /sys/man/1/rc /sys/man/1/rc.orig
	cp /sys/man/2/fork /sys/man/2/fork.orig
	cp /sys/man/3/srv /sys/man/3/srv.orig
	cp /sys/man/3/proc /sys/man/3/proc.orig
	cp sys/man/1/grio /sys/man/1/grio
	cp sys/man/1/cpns /sys/man/1/cpns
	cp sys/man/1/rerootwin /sys/man/1/rerootwin
	cp sys/man/1/addwrroot /sys/man/1/addwrroot
	cp sys/man/1/rc /sys/man/1/rc
	cp sys/man/1/chat /sys/man/1/chat
	cp sys/man/1/gridstart /sys/man/1/gridstart
	cp sys/man/2/fork /sys/man/2/fork
	cp sys/man/3/srv /sys/man/3/srv
	cp sys/man/3/proc /sys/man/3/proc
	cp sys/man/8/plan9rc /sys/man/8/plan9rc
	cp sys/man/8/ventiprog /sys/man/8/ventiprog
	cp sys/man/8/gridlisten1 /sys/man/8/gridlisten1
	cp doc/antspaper.ms /sys/doc/ants.ms
	cp doc/ants.ps /sys/doc/ants.ps
	if(! ~ $buildingvultrfossil yes){
		echo 'enter a password for remote access:'
		setpasswd=`{read}
		echo 'privpassword='$setpasswd >>/n/9fat/plan9.ini
		rm /env/setpasswd
		echo '9front-ANTS base install complete'
	}
	exit
}

if(~ $1 vultr){
	checkfrontclean
	build 9front
	build 9frontinstall
	9fs 9fat
	cp cfg/vultrplan9.ini /n/9fat/plan9.ini
	echo 'enter a password for remote access:'
	setpasswd=`{read}
	echo 'privpassword='$setpasswd >>/n/9fat/plan9.ini
	rm /env/setpasswd
	echo '9front-ANTS vultr node base install complete'
	exit ''
}

if(~ $1 vultrfossil){
	checkfrontclean
	buildingvultrfossil=yes
	cd cfg
	cat vultdisk |disk/prep /dev/sdF0/plan9
	cd $builddir
	if (! test -e /mnt/web/ctl)
		webfs
	hg clone https://bitbucket.org/mycroftiv/fossilnewventi
	cd /
	ape/patch -p0 <$builddir/diffs/fromlegacy/libventi-noarchive.diff
	ape/patch -p0 <$builddir/diffs/fromlegacy/libventi-redial.diff
	ape/patch -p0 <$builddir/diffs/fromlegacy/libventi-sha1.diff
	cd /sys/src/libventi
	mk clean
	mk install
	mk clean
	cd $builddir/fossilnewventi
	INSTALL
	cd $builddir
	build 9front
	build 9frontinstall
	cd $builddir/cfg
	mount /srv/boot /n/dist
	fossil/flfmt /dev/sdF0/fossil
	fossil/conf -w /dev/sdF0/fossil initfossil.conf
	fossil/fossil -f /dev/sdF0/fossil
	mount -c /srv/fossil /n/fossil
	disk/mkfs -U -z 8192 -s /n/dist -d /n/fossil /sys/lib/sysconfig/proto/allproto
	echo 'home=/usr/$user; cd; . $home/lib/profile' >>/n/fossil/rc/bin/termrc
	fossil/conf -w /dev/sdF0/fossil fossil.conf
	venti/fmtarenas arenas /dev/sdF0/arenas
	venti/fmtisect isect /dev/sdF0/isect
	venti/fmtindex venti.conf
	venti/conf -w /dev/sdF0/arenas venti.conf
	cd ..
	9fs 9fat
	cp cfg/vfosvenp9.ini /n/9fat/plan9.ini
	echo 'venti/wrarena -h /net.alt/tcp!127.1!17034 -o 794624 /dev/sdF0/arenas 0x0' >/n/9fat/wrcmd
	echo 'enter a password for remote access:'
	setpasswd=`{read}
	echo 'privpassword='$setpasswd >>/n/9fat/plan9.ini
	rm /env/setpasswd
	ls /dev/sdF*
	echo 'vultr ANTS node installed, fshalt -r when ready'
	exit ''
}

if(~ $1 tools){
	echo building tools
	rm root/bin/* >/dev/null >[2=1]
	cp cfg/toolcopy root/bin/_toolcopy
	cd root/bin
	. _toolcopy
	cd $builddir
	strip root/bin/* >/dev/null >[2=1]
	ramfs -m /tmp
	tar cf /tmp/tools.tar root
	gzip -9 -c /tmp/tools.tar >tools.tgz
	rm /tmp/tools.tar
	cd $builddir
	exit ''
}
